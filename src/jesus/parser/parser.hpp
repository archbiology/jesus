#pragma once

#include <vector>
#include <memory>
#include "../lexer/token.hpp"
#include "../ast/stmt/stmt.hpp"
#include "../ast/expr/expr.hpp"

/**
 * @brief Parses a list of tokens into an Abstract Syntax Tree (AST).
 *
 * This function takes the flat stream of tokens produced by the lexer
 * and transforms them into a structured AST representation that can
 * later be interpreted or compiled.
 *
 * The returned Stmt is the root of the tree, representing the
 * parsed program or expression.
 *
 * "The earth was formless and empty... And God said, 'Let there be light.'" — Genesis 1:2–3
 * Parsing is the act of bringing form and meaning to what was once unstructured,
 * mirroring how God's Word brings order and purpose.
 *
 * @param tokens A vector of tokens generated by the lexer.
 * @return std::unique_ptr<Stmt> A unique pointer to the root Stmt node.
 */
std::unique_ptr<Stmt> parse(const std::vector<Token> &tokens);

std::unique_ptr<Expr> parseExpression(const std::vector<Token> &tokens);
